schema-version: v2
kind: plugin
metadata:
  name: dotnet-repository
  display-name: dotnet-repository
  description: Descreva seu plugin explicando o prop√≥sito
  version: 0.0.1
  picture: plugin.png
spec:
  type: app
  compatibility:
    - python
  about: docs/about.md
  implementation: docs/implementation.md
  release-notes: docs/release-notes-0.0.1.md
  requirements: docs/requirements.md
  single-use: False
  repository: https://github.com/thiagomaia971/Stackspot-ThiagoMaia971-Studio.git
  technologies: # Ref: https://docs.stackspot.com/create-use/create-content/yaml-files/plugin-yaml/#technologies-1
    - Api
  stk-projects-only: false
  inputs:
    - label: Which Database do you want to use?
      type: text
      name: database_type
      required: true
      default: "DynamoDb"
      global: true
      items:
        - "DynamoDb"
        - "Sql Server"
        - "MySql"
  global-computed-inputs:
    dynamodb: "DynamoDb"
    sqlserver: "Sql Server"
    mysql: "MySql"
    is_dynamodb: "{% if database_type == dynamodb %}true{% else %}false{% endif %}"
    is_slqserver: "{% if database_type == sqlserver %}true{% else %}false{% endif %}"
    is_mysql: "{% if database_type == mysql %}true{% else %}false{% endif %}"
  hooks:

  #package DynamoDb
    - type: run
      trigger: before-render
      commands:
        - dotnet add src/{{solution_name}}.Domain package CruderSimple.DynamoDb -v 0.0.1-alpha-1.0.3
      condition:
        variable: is_dynamodb
        operator: "=="
        value: "true"

  #package Sql Server
    - type: run
      trigger: before-render
      commands:
        - dotnet add src/{{solution_name}}.Domain package CruderSimple.DynamoDb -v 0.0.1-alpha-1.0.3
      condition:
        variable: is_sqlserver
        operator: "=="
        value: "true"

  #package MySql
    - type: run
      trigger: before-render
      commands:
        - dotnet add src/{{solution_name}}.Infrastructure package Microsoft.AspNetCore.Identity.EntityFrameworkCore -v 8.0.0
        - dotnet add src/{{solution_name}}.Infrastructure package Microsoft.EntityFrameworkCore -v 8.0.0
        - dotnet add src/{{solution_name}}.Infrastructure package Microsoft.EntityFrameworkCore.Relational -v 8.0.0
        - dotnet add src/{{solution_name}}.Infrastructure package Microsoft.EntityFrameworkCore.Tools -v 8.0.0
        - dotnet add src/{{solution_name}}.Infrastructure package Pomelo.EntityFrameworkCore.MySql -v 8.0.0-beta.2
      condition:
        variable: is_mysql
        operator: "=="
        value: "true"

  #dependencyinjection
    # - type: edit
    #   trigger: before-render
    #   path: "src/{{solution_name}}.Api/Configurations.cs"
    #   condition:
    #     variable: is_dynamodb
    #     operator: "=="
    #     value: "true"
    #   changes:
    #     - search:
    #         string: "using"
    #         insert-before:
    #           value: "using CruderSimple.DynamoDb.Configurations;\n"
    #         when:
    #           not-exists: "using CruderSimple.DynamoDb.Configurations"
    #     - search:
    #         pattern: "return infraServices"
    #         insert-before:
    #           value: "infraServices.AddDynamodbMapper(configuration, environment);\n"
    #         when:
    #           not-exists: "infraServices.AddDynamodbMapper"
    # - type: edit
    #   trigger: after-render
    #   path: src/{{solution_name}}.Domain/Models/Entity.cs
    #   condition:
    #     variable: is_dynamodb
    #     operator: "=="
    #     value: "true"
    #   changes:
    #     - search:
    #         pattern: using
    #         insert-before:
    #           value: "using Amazon.DynamoDBv2.DataModel;"
    #         when:
    #           not-exists: "using Amazon.DynamoDBv2.DataModel;"
    #     - search:
    #         pattern: Entity {
    #         replace-by:
    #           value: "Entity : CruderSimple.DynamoDb.Entities.Entity {"
    #         when:
    #           not-exists: CruderSimple.DynamoDb.Entities.Entity
    #     - search:
    #         pattern: JsonProperty
    #         insert-after:
    #           value: "[DynamoDBProperty(\"Id\")]"
    #         when:
    #           not-exists: "[DynamoDBProperty(\"Id\")]"
    # - type: edit
    #   trigger: after-render
    #   path: src/{{solution_name}}.Domain/Interfaces/Repositories/Base/IRepository.cs
    #   condition:
    #     variable: is_dynamodb
    #     operator: "=="
    #     value: "true"
    #   changes:
    #     - search:
    #         pattern: "IRepository<T> where T : Entity"
    #         replace-by:
    #           value: "IRepository<T> : CruderSimple.DynamoDb.Interfaces.IRepository<T> where T : Entity"
    #         when:
    #           not-exists: CruderSimple.DynamoDb.Interfaces
    - type: render-templates
      trigger: after-render
      path: templates-{{database_type | lower | replace(" ", "") | camelcase}}

    #format
    # - type: run
    #   trigger: after-render
    #   working-dir: "src/{{solution_name}}.Api"
    #   commands:
    #     -  dotnet format --include-generated
    #   condition:
    #     variable: has_api
    #     operator: "=="
    #     value: "true"
    # - type: run
    #   trigger: after-render
    #   working-dir: "src/{{solution_name}}.Domain"
    #   commands:
    #     -  dotnet format --include-generated
    # - type: run
    #   trigger: after-render
    #   working-dir: "src/{{solution_name}}.Infrastructure"
    #   commands:
    #     -  dotnet format --include-generated